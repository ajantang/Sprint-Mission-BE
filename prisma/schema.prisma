// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 필드명 설정 : userId Int @id @default(autoincrement()) @map("user_id")
// table 명 설정 : 스키마 중괄호 마지막에(중괄호 안에) @@map("push_token")

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String   @id @default(uuid()) @db.VarChar(36)
    email             String   @unique @db.VarChar(254)
    encryptedPassword String   @db.VarChar(128)
    name              String   @db.VarChar(255)
    nickname          String   @unique @db.VarChar(50)
    image             String?  @db.VarChar(2048)
    createdAt         DateTime @default(now()) @map("created_at")
    updatedAt         DateTime @updatedAt @map("updated_at")

    Product         Product[]
    FavoriteProduct FavoriteProduct[]
    ProductComment  ProductComment[]
    Post            Post[]
    FavoritePost    FavoritePost[]
    PostComment     PostComment[]

    @@map("user")
}

model Product {
    id            String   @id @default(uuid()) @db.VarChar(36)
    User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String   @map("user_id")
    name          String   @db.VarChar(50)
    description   String   @db.VarChar(1024)
    price         Int
    favoriteCount Int      @default(0) @map("favorite_count")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")

    FavoriteProduct FavoriteProduct[]
    ProductTag      ProductTag[]
    ProductImage    ProductImage[]
    ProductComment  ProductComment[]

    @@map("product")
}

model FavoriteProduct {
    id        String   @id @default(uuid()) @db.VarChar(36)
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @map("user_id")
    Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String   @map("product_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([userId, productId])
    @@map("favorite_product")
}

model ProductTag {
    id        String   @id @default(uuid()) @db.VarChar(36)
    Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String   @map("product_id")
    tag       String   @db.VarChar(50)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("product_tag")
}

model ProductImage {
    id        String   @id @default(uuid()) @db.VarChar(36)
    Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String   @map("product_id")
    image     String   @db.VarChar(2048)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("product_image")
}

model ProductComment {
    id        String   @id @default(uuid()) @db.VarChar(36)
    Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String   @map("product_id")
    content   String   @db.VarChar(500)
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?  @map("user_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("product_comment")
}

model Post {
    id            String   @id @default(uuid()) @db.VarChar(36)
    User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String   @map("user_id")
    title         String   @db.VarChar(50)
    content       String   @db.VarChar(1024)
    favoriteCount Int      @default(0) @map("favorite_count")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")

    PostImage    PostImage[]
    FavoritePost FavoritePost[]
    PostComment  PostComment[]

    @@map("post")
}

model PostImage {
    id        String   @id @default(uuid()) @db.VarChar(36)
    Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String   @map("post_id")
    image     String   @db.VarChar(2048)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("post_image")
}

model FavoritePost {
    id        String   @id @default(uuid()) @db.VarChar(36)
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @map("user_id")
    Post      Post     @relation(fields: [PostId], references: [id], onDelete: Cascade)
    PostId    String   @map("post_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@unique([userId, PostId])
    @@map("favorite_post")
}

model PostComment {
    id        String   @id @default(uuid()) @db.VarChar(36)
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @map("user_id")
    Post      Post     @relation(fields: [PostId], references: [id], onDelete: Cascade)
    PostId    String   @map("post_id")
    content   String   @db.VarChar(200)
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("post_comment")
}
