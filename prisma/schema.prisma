// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  name String
  nickname String @unique
  password String
  email String @unique
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProducts {
  id String @id @default(uuid())
  userId Int
  ProductId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavoriteProducts {
  id String @id @default(uuid())
  userId Int
  ProductId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())
  name String
  description String
  price Int
  ownerId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTags {
  id String @id @default(uuid())
  productId Int
  tag String
}

model ProductImages {
  id String @id @default(uuid())
  productId Int
  image String
}

model ProductFavoriteUsers {
  id String @id @default(uuid())
  userId Int
  ProductId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Article {
  id String @id @default(uuid())
  userId String 
  title String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Comment {
  id String @id @default(uuid())
  userId String 
  articleId String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}